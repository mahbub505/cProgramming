Content-Type: multipart/related; start=<op.mhtml.1312486212799.4b70ee594a442f77@172.17.209.13>; boundary=----------LpuvV7psl22J0K1fRERL3s
Content-Location: file://localhost/E:/New%20folder/program/manik/ACM%20%20Problem/3/371.html
Subject: =?utf-8?Q?Ackermann=20Functions?=
MIME-Version: 1.0

------------LpuvV7psl22J0K1fRERL3s
Content-Disposition: inline; filename=371.html
Content-Type: text/html; name=371.html
Content-ID: <op.mhtml.1312486212799.4b70ee594a442f77@172.17.209.13>
Content-Location: file://localhost/E:/New%20folder/program/manik/ACM%20%20Problem/3/371.html
Content-Transfer-Encoding: 8bit

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Ackermann Functions</TITLE>
<META NAME="description" CONTENT="Ackermann Functions">
<META NAME="keywords" CONTENT="htmlatex">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="htmlatex.css">
</HEAD>
<BODY LANG="EN" BGCOLOR=#FFFFFF>
 <H1><BR CLEAR=ALL><CENTER><TABLE BGCOLOR=#0060F0><TR><TD><B><FONT SIZE=5 COLOR=#C0FFFF>&nbsp;<A NAME="SECTION0001000000000000000000">Ackermann Functions</A></FONT>&nbsp;</B></TABLE></CENTER></H1>
<P>
     An Ackermann function has the characteristic that the length of the
sequence of numbers generated by the function cannot be computed directly
from the input value.  One particular integer Ackermann function is the
following:
<P> <IMG WIDTH=379 HEIGHT=40 ALIGN=BOTTOM ALT="displaymath32" SRC="371img1.gif"  > <P>
<P>
This Ackermann has the characteristic that it eventually converges on 1.  A
few examples follow in which the starting value is shown in square brackets
followed by the sequence of values that are generated, followed by the length
of the sequence in curly braces:
<P>
<PRE>     [10] 5 16 8 4 2 1 {6}
     [13] 40 20 10 5 16 8 4 2 1 {9}
     [14] 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 {17}
     [19] 58 29 88 44 22 ... 2 1 {20}
     [32] 16 8 4 2 1 {5}
     [1] 4 2 1 {3}</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001001000000000000000">Input and Output</A></FONT></H2>
<P>
Your program is to read in a series of pairs of values that represent the
first and last numbers in a closed sequence.  For each closed sequence pair
determine which value generates the longest series of values before it
converges to 1.  The largest value in the sequence will not be larger than
can be accomodated in a 32-bit Pascal LongInt or C long.  The last pair of
values will be 0, 0.  The output from your program should be as follows:
<P>
<P>
<P>
<TT>Between</TT> <I>L</I> <TT>and</TT> <I>H</I>, <I>V</I> <TT>generates the longest sequence of</TT>
 <I>S</I> <TT>values.</TT>
<P>
<P>
<P>
Where:
<P>
<I>L</I> = the lower boundary value in the sequence
<P>
<I>H</I> = the upper boundary value in the sequence
<P>
<I>V</I> = the first value that generates the longest sequence, 
                   (if two or more values generate the longest sequence 
                    then only show the lower value)
<I>S</I> = the length of the generated sequence.
<P>
<P>
In the event that two numbers in the interval should both produce equally
long sequences, report the first.
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001002000000000000000">Sample Input</A></FONT></H2>
<P>
<PRE>  1 20
 35 55
  0 0</PRE>
<P>
<H2><FONT COLOR=#0070E8><A NAME="SECTION0001003000000000000000">Sample Output</A></FONT></H2>
<P>
<PRE>Between 1 and 20, 18 generates the longest sequence of 20 values.
Between 35 and 55, 54 generates the longest sequence of 112 values.</PRE>
<P>
</BODY>
</HTML>

------------LpuvV7psl22J0K1fRERL3s
Content-Disposition: inline; filename=371img1.gif
Content-Type: image/gif; name=371img1.gif
Content-Location: file://localhost/E:/New%20folder/program/manik/ACM%20%20Problem/3/371img1.gif
Content-Transfer-Encoding: Base64

R0lGODlhewEoAIAAAAAAAP///yH5BAEAAAEALAAAAAB7ASgAAAL+jI+py+0Po5y0
2muBBmbjD4biSJbmiaYq5jlat8byTNf2jZfv83L5DwwKh0TgjtcqKpfMppN4hESf
Ul8nmdgctZQp9QsOK6zSgFeM2HLOhyTbRUbL58t4o2enZ/PjHV8PGPj1l+Yz1QP4
tmdGKOj4KNTIxWiFh+Y3CWf2ofbWMvl5yAhJ6tRYRSmmNqGIisnwujo6O9taektz
ipQaJlule7dWCWtYDHOFnGyLy6wiqQUdnfnki7RMfMUWZbxJ2/193SxOAoxbje1d
0Zl3lqndVj6eAg0f/hNfer5QeSisScaOjxuB8OQNGagqA5Y5+rIs2qMIURt04LYN
O5bOII7+T3LwdbNXhAs9iJhAfQwmTeBIjNlCRdMYxJIqj9xgovpmM6cEiTI89uHk
U5yloDrHgWRRMqULoEV3LWwKtZ66gEtbKu0TlGfUrVx/xWtH9OYFQ13Lmi2UrKAX
sDGOUnJ7Nu4tfnGmpUUbIaVdvHL7+r3zcBNZq1g8wS34N/HfkS9r1VuZUWqIsIor
bx3KN7Mzy5w7I1u4dq+JU09XitbB9DGxgfYO7wNL2TMI15M1RUbo7CkrfpEl97at
Q6VsI7E5AQ89mAUrcro4KtFWfLgeQg1lKt/JfKe/58KlNwUGHefY5Uitukr9Fo4d
65+je++Yl3rsckQbUhy7Pbwy3mmpab+n84xuvMxGHn6I/TLbduId+Ep//P1nE30B
HaWXgAvudqA19RWjX3t4WQRhTtRp1iBattCH3ok1qSWfaj+x+CFA7oU4yB/n0IUV
aQUqlCEsvrmIDUCvmSjjXf7R2IuND4q3zUk87DhVj2MEJhhLPwk55H4MLomkUWzV
AoppyQHmFUgi7cWYmFYWclWOFokJWZdCQecTZmQm4s+Mcu4ZpYVrdiSMnicUAAA7

------------LpuvV7psl22J0K1fRERL3s--
